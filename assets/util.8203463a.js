class p{constructor(){this.accountId=null,this.username=null,this.tweetsById={}}preprocessTweets(t){const r=[];for(let n=0;n<t.length;n++){const e=t[n].tweet;e.url=`https://x.com/${this.username}/status/${e.id}`,e.date=new Date(e.created_at),r.push(e),this.tweetsById[e.id]=e}return r}getThreads(t){const r=[];let n=0,e=0;for(let o=0;o<t.length;o++){const{in_reply_to_user_id_str:a,in_reply_to_status_id:d,full_text:c}=t[o];if(c.startsWith("RT")){n++;continue}if(a!=null&&a!=this.accountId){t[o].is_external_reply=!0,e++;continue}if(a==this.accountId){const i=d;if(!this.tweetsById[i]){console.error(`Error: failed to find tweet ${i}`);continue}if(this.tweetsById[i].is_external_reply){t[o].is_external_reply=!0,e++;continue}else this.tweetsById[i].nextTweet=t[o],t[o].parent=this.tweetsById[i]}r.push(t[o])}return{tweets:r,retweet_count:n,external_reply_count:e}}sortAscending(t){return t.sort(function(r,n){return r.date-n.date})}sortDescending(t){return t.sort(function(r,n){return n.date-r.date})}formatDate(t,r){return t.toLocaleDateString("en-US",r||{hour:"numeric",year:"numeric",month:"short",day:"2-digit"})}makeHTMLForTweet(t){return`<div class="tweet">
      <p>${t.full_text}</p>
      <div class="metadata">
        <p>${this.formatDate(t.date)}</p>
        <div class="toolbar">
          ${Number(t.retweet_count).toLocaleString()} \u{1F502} ${Number(t.favorite_count).toLocaleString()} \u{1F90D}
          <a href="${t.url}" target="_blank" style="text-decoration:none">
            <svg width="20px" height="20px" viewBox="0 0 24 24" transform="translate(0 3)" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11 4H4V18C4 19.1046 4.89543 20 6 20H18C19.1046 20 20 19.1046 20 18V13" stroke="#292929" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><path d="M9 15L20 4" stroke="#292929" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><path d="M15 4H20V9" stroke="#292929" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/></svg>
          </a>
        </div>
      </div>
    </div>
    `}makeHTMLForThread(t){let r='<div class="thread">';for(;t;)r+=this.makeHTMLForTweet(t),t=t.nextTweet;return r+="</div>",r}getPopularityOverTime(t){const r=t.reduce((n,e)=>{const o=u(e.date),a=Number(e.favorite_count)+Number(e.retweet_count);return n[o]=(n[o]||0)+a,n},{});return h(Object.entries(r).map(n=>({x:n[0],y:n[1]})))}countTweetsPerDay(t){const r=t.reduce((e,o)=>{const a=u(o.date);return e[a]=(e[a]||0)+1,e},{});return Object.entries(r).sort((e,o)=>o[1]-e[1]).map(e=>({date:e[0],count:e[1]}))}countTweetsPerHour(t){const r=t.reduce((e,o)=>{const a=l(o.date);return e[a]=(e[a]||0)+1,e},{});return Object.entries(r).sort((e,o)=>o[1]-e[1]).map(e=>({date:e[0],count:e[1]}))}isTweetInteractingWith(t,r){const n=r.entities.user_mentions;if(r.in_reply_to_user_id==t)return!0;for(let e of n)if(e.id==t)return!0;return!1}}const u=s=>{const t=s.getFullYear(),r=(s.getMonth()+1).toString().padStart(2,"0"),n=s.getDate().toString().padStart(2,"0");return`${t}-${r}-${n}`},l=s=>{const t=s.getFullYear(),r=(s.getMonth()+1).toString().padStart(2,"0"),n=(s.getDate()+1).toString().padStart(2,"0"),e=s.getHours().toString().padStart(2,"0");return`${t}-${r}-${n}/${e}`},h=s=>s.sort((t,r)=>{const n=new Date(t.x),e=new Date(r.x);return n-e});export{p as U};
